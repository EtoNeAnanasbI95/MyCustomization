import{r as h,j as P}from"./client-45b27fd3.js";import{D as r}from"./index-825701e8.js";import{v as j}from"./v4-4a60fe23.js";const g="nmoieokchdkoocajffflbheochjhohmj",u="camppjleccjaphfdbohjdohecfnoikec",k=h.createContext({getFromBackground:async()=>{throw new Error("MessageContext not initialized")},storageId:null}),C=({children:p,isWebpage:f})=>{let a=null;const w={getFromBackground:h.useCallback(async(c,i,l)=>{if(f){let o;try{if((await chrome.runtime.sendMessage(u,{action:"PING"})).action==="PONG")o=chrome.runtime.connect(u);else throw new Error("Extension not installed")}catch{if((await chrome.runtime.sendMessage(g,{action:"PING"})).action==="PONG")o=chrome.runtime.connect(g);else throw new Error("Extension not installed")}return await new Promise(e=>{o.postMessage({action:c,from:i,payload:l}),o.onMessage.addListener(function(s){o.disconnect(),e(s)})})}else return new Promise((o,d)=>{const e=`getFromBackground-${j()}`;a=e;const s={action:c,from:i,id:e,payload:l,status:"pending"};r.storage.local.set({[e]:s}).then(()=>{const n=async(m,E)=>{if(E==="local"&&m[e]){const{newValue:t,oldValue:x}=m[e];t&&t!==x&&t.hasOwnProperty("response")&&(r.storage.onChanged.removeListener(n),t.status==="fulfilled"&&await r.storage.local.remove(t.id),o(t.response))}};r.storage.onChanged.addListener(n)}).catch(n=>{d(n)})})},[]),storageId:a};return P.jsx(k.Provider,{value:w,children:p})};export{u as E,C as M,k as a};
